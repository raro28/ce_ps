@{
/*
 * Copyright (C) 2012 Hector Eduardo Diaz Campos
 * 
 * This file is part of Mx.DotNet.Statistics.
 * 
 * Mx.DotNet.Statistics is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 * 
 * Mx.DotNet.Statistics is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Mx.DotNet.Statistics.  If not, see <http://www.gnu.org/licenses/>.
 */
 }
@using System.Collections.Generic
@using System.Dynamic
@using System.Linq
@model IEnumerable<dynamic>
<script type="text/javascript" language="javascript">
$(document).ready(function() 
    { 
        $("#distributionTable").tablesorter(); 
    } 
); 
</script>
<table  id="distributionTable" class="tablesorter"">
    <thead>@DiscoverHeader(Model.First())</thead>
    <tbody>
        @foreach (var item in Model) {
        <tr>@DiscoverRow(item)</tr>
        }     
    </tbody>       
</table>
@helper DiscoverHeader(IDictionary<string, object> rowSample){
    Dictionary<string,string> map = new Dictionary<string, string>()
    {
        {"ClassInterval","I.C."},
        {"Frequency","frec"},
        {"ClassMark","X"},
        {"fX","fX"},
        {"AcumulatedFrequency","Frec"},
        {"RealInterval","I.R."},
        {"fMeanDiffE1","f|X-Media|"},
        {"fMeanDiffE2","f(X-Media)^2"},
        {"fMeanDiffE3","f(X-Media)^3"},
        {"fMeanDiffE4","f(X-Media)^4"},
        {"RelativeFrequency","fr"},
        {"AcumulatedRelativeFrequency","Fr"},
    };

    foreach (var pair in rowSample) {<th>@map[pair.Key]</th>}
}

@helper DiscoverRow(IDictionary<string, object> row){
    foreach (var pair in row) {
        <td>@if(
                (pair.Key.Contains("fMeanDiff") || 
                pair.Key.Contains("AcumulatedRelativeFrequency") ||
                pair.Key.Contains("RelativeFrequency")) ){@Math.Round((double)pair.Value, 4)}
        else{@pair.Value}</td>
    }
}
